const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
const scoreElement = document.getElementById('score');
const restartBtn = document.getElementById('restartBtn');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
const GRID_SIZE = 20;
const INITIAL_SPEED = 150;
const COLORS = {
    snake: '#00FF00',
    snakeHead: '#00CC00',
    food: '#F7931A',
    background: '#111',
    text: '#FFFFFF',
    gameOver: '#FF0000',
    wall: '#333333'
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let snake = [];
let food = {};
let dx = 0;
let dy = 0;
let score = 0;
let speed = INITIAL_SPEED;
let gameInterval;
let isGameRunning = false;
let touchStartX = 0;
let touchStartY = 0;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
resizeCanvas();
window.addEventListener('resize', resizeCanvas);
initGame();

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ canvas
function resizeCanvas() {
    const size = Math.min(window.innerWidth - 40, 400);
    canvas.style.width = `${size}px`;
    canvas.style.height = `${size}px`;
    canvas.width = size;
    canvas.height = size;
    
    if (isGameRunning) {
        drawGame();
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã
function initGame() {
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    if (gameInterval) clearInterval(gameInterval);
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∑–º–µ–π–∫–∏ (–ø–æ —Ü–µ–Ω—Ç—Ä—É)
    const centerX = Math.floor(canvas.width / 2 / GRID_SIZE) * GRID_SIZE;
    const centerY = Math.floor(canvas.height / 2 / GRID_SIZE) * GRID_SIZE;
    
    snake = [
        {x: centerX, y: centerY},
        {x: centerX - GRID_SIZE, y: centerY},
        {x: centerX - GRID_SIZE * 2, y: centerY}
    ];
    
    generateFood();
    dx = GRID_SIZE;
    dy = 0;
    score = 0;
    speed = INITIAL_SPEED;
    isGameRunning = true;
    restartBtn.style.display = 'none';
    
    updateScore();
    gameInterval = setInterval(gameLoop, speed);
    drawGame();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–¥—ã
function generateFood() {
    const cols = Math.floor(canvas.width / GRID_SIZE);
    const rows = Math.floor(canvas.height / GRID_SIZE);
    
    let newFood;
    let isFoodValid = false;
    let attempts = 0;
    const maxAttempts = 100;
    
    while (!isFoodValid && attempts < maxAttempts) {
        attempts++;
        newFood = {
            x: Math.floor(Math.random() * cols) * GRID_SIZE,
            y: Math.floor(Math.random() * rows) * GRID_SIZE
        };
        
        isFoodValid = !snake.some(segment => 
            segment.x === newFood.x && segment.y === newFood.y
        );
    }
    
    food = newFood;
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä—ã
function drawGame() {
    // –û—á–∏—Å—Ç–∫–∞ canvas
    ctx.fillStyle = COLORS.background;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞–Ω–∏—Ü
    ctx.strokeStyle = COLORS.wall;
    ctx.lineWidth = 2;
    ctx.strokeRect(0, 0, canvas.width, canvas.height);
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –µ–¥—ã (—Å–∏–º–≤–æ–ª –±–∏—Ç–∫–æ–∏–Ω–∞)
    ctx.fillStyle = COLORS.food;
    ctx.font = `${GRID_SIZE}px Arial`;
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText("‚Çø", food.x + GRID_SIZE/2, food.y + GRID_SIZE/2);
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–º–µ–π–∫–∏
    snake.forEach((segment, index) => {
        ctx.fillStyle = index === 0 ? COLORS.snakeHead : COLORS.snake;
        ctx.fillRect(segment.x, segment.y, GRID_SIZE, GRID_SIZE);
        
        // –ì—Ä–∞–Ω–∏—Ü—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        ctx.strokeStyle = '#000';
        ctx.lineWidth = 1;
        ctx.strokeRect(segment.x, segment.y, GRID_SIZE, GRID_SIZE);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function updateGame() {
    if (!isGameRunning) return;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥–æ–ª–æ–≤—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
    let head = {
        x: snake[0].x + dx,
        y: snake[0].y + dy
    };
    
    // –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∫–≤–æ–∑—å —Å—Ç–µ–Ω—ã
    if (head.x < 0) head.x = canvas.width - GRID_SIZE;
    if (head.x >= canvas.width) head.x = 0;
    if (head.y < 0) head.y = canvas.height - GRID_SIZE;
    if (head.y >= canvas.height) head.y = 0;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å —Å–æ–±–æ–π
    if (checkSelfCollision(head)) {
        gameOver();
        return;
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥–æ–ª–æ–≤—ã
    snake.unshift(head);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—ä–µ–¥–µ–Ω–∞ –ª–∏ –µ–¥–∞
    if (head.x === food.x && head.y === food.y) {
        score++;
        updateScore();
        
        // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 5 –æ—á–∫–æ–≤
        if (score % 5 === 0 && speed > 50) {
            speed -= 5;
            clearInterval(gameInterval);
            gameInterval = setInterval(gameLoop, speed);
        }
        
        generateFood();
    } else {
        // –£–¥–∞–ª–µ–Ω–∏–µ —Ö–≤–æ—Å—Ç–∞ –µ—Å–ª–∏ –µ–¥–∞ –Ω–µ —Å—ä–µ–¥–µ–Ω–∞
        snake.pop();
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å —Å–æ–±–æ–π
function checkSelfCollision(head) {
    for (let i = 1; i < snake.length; i++) {
        if (head.x === snake[i].x && head.y === snake[i].y) {
            return true;
        }
    }
    return false;
}

// –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã
function gameOver() {
    isGameRunning = false;
    clearInterval(gameInterval);
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    ctx.fillStyle = COLORS.gameOver;
    ctx.font = '30px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('üíÄ –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã!', canvas.width/2, canvas.height/2 - 30);
    
    ctx.font = '20px Arial';
    ctx.fillText(`–°—á—ë—Ç: ${score}`, canvas.width/2, canvas.height/2 + 10);
    
    // –ü–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
    restartBtn.style.display = 'block';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç–∞
function updateScore() {
    scoreElement.textContent = score;
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
function gameLoop() {
    updateGame();
    drawGame();
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function changeDirection(newDx, newDy) {
    // –ó–∞–ø—Ä–µ—Ç —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –Ω–∞ 180 –≥—Ä–∞–¥—É—Å–æ–≤
    if ((dx !== 0 && newDx !== 0) || (dy !== 0 && newDy !== 0)) {
        return;
    }
    
    dx = newDx;
    dy = newDy;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
document.getElementById('upBtn').addEventListener('click', () => changeDirection(0, -GRID_SIZE));
document.getElementById('downBtn').addEventListener('click', () => changeDirection(0, GRID_SIZE));
document.getElementById('leftBtn').addEventListener('click', () => changeDirection(-GRID_SIZE, 0));
document.getElementById('rightBtn').addEventListener('click', () => changeDirection(GRID_SIZE, 0));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
restartBtn.addEventListener('click', initGame);

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
document.addEventListener('keydown', e => {
    if (!isGameRunning) {
        if (e.key === ' ' || e.key === 'Enter') {
            initGame();
        }
        return;
    }
    
    switch(e.key) {
        case 'ArrowUp':
            changeDirection(0, -GRID_SIZE);
            break;
        case 'ArrowDown':
            changeDirection(0, GRID_SIZE);
            break;
        case 'ArrowLeft':
            changeDirection(-GRID_SIZE, 0);
            break;
        case 'ArrowRight':
            changeDirection(GRID_SIZE, 0);
            break;
    }
});

// –°–≤–∞–π–ø—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
canvas.addEventListener('touchstart', handleTouchStart, {passive: false});
canvas.addEventListener('touchmove', handleTouchMove, {passive: false});

function handleTouchStart(e) {
    touchStartX = e.touches[0].clientX;
    touchStartY = e.touches[0].clientY;
    e.preventDefault();
}

function handleTouchMove(e) {
    if (!isGameRunning) return;
    
    const touchEndX = e.touches[0].clientX;
    const touchEndY = e.touches[0].clientY;
    
    const dx = touchEndX - touchStartX;
    const dy = touchEndY - touchStartY;
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–∞–π–ø–∞
    if (Math.abs(dx) > Math.abs(dy)) {
        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
        if (dx > 0) {
            changeDirection(GRID_SIZE, 0); // –í–ø—Ä–∞–≤–æ
        } else {
            changeDirection(-GRID_SIZE, 0); // –í–ª–µ–≤–æ
        }
    } else {
        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
        if (dy > 0) {
            changeDirection(0, GRID_SIZE); // –í–Ω–∏–∑
        } else {
            changeDirection(0, -GRID_SIZE); // –í–≤–µ—Ä—Ö
        }
    }
    
    e.preventDefault();
}
